---
title: "01-phagegan28samples"
title-block-banner: true
author:
  - name: Jinlong Ru
    orcid: 0000-0002-6757-6018
date: 2023-02-24
toc: true
format: gfm
params:
  name: "01-phagegan28samples"
---

Updated: `r format(Sys.time(), '%Y-%m-%d %H:%M:%S', tz = 'CET')` CET.

```{r setup, message=FALSE, include=FALSE}
here::i_am(paste0(params$name, ".qmd"), uuid = "a2438134-fcd1-4157-89b8-5a6f84549e94")
projthis::proj_create_dir_target(params$name, clean = FALSE)
path_target <- projthis::proj_path_target(params$name)
path_source <- projthis::proj_path_source(params$name)
path_data <- path_source("00-raw", params$name)
dir.create(path_data, recursive = T)
```

The purpose of this document is to assemble and annotate the 28 phage samples isolated by Tianli. 

1. Raw reads were cleaned and assembled using PhageGAN with Unicycler assembler.
3. Closest reference genomes were identified using refseqmasher searching against the NCBI RefSeq database.
2. The assembled contigs were annotated using Pharokka.
3. Protein sequences were extracted from the annotated GBK files and further annotated using MMseqs2 searching against the NCBI NR database, and using EggNOG-mapping searching against the EggNOG database.
4. Annotations from NR and EggNOG were added to the GBK files using custom python script.

```{r packages}
library(here)
```

```{zsh}
echo $PATH | sed 's/:/\n/g'
```

### Determine which contigs from the isolated phage samples are viruses

We use the following script to determine which contigs are viruses, 

1. CheckV
2. GenomaD
3. VirSorter2
4. iPHOP
5. ...

```{python}
import os
import pandas as pd

def get_path(fname, extra_path=""):
    return os.path.join(r.path_data, extra_path, fname)

extra_path = "isophage_qc"
fin_checkv = get_path("quality_summary.tsv", extra_path)
fin_genomad_virus = get_path("isophage_ragtag_nonRef_virus_summary.tsv", extra_path)
fin_genomad_plasmid = get_path("isophage_ragtag_nonRef_plasmid_summary.tsv", extra_path)
fin_iphop = get_path("Host_prediction_to_genome_m90.csv", extra_path)
fin_vs2 = get_path("final-viral-score.tsv", extra_path)
fin_vs2_cat = get_path("vs2_category.csv", extra_path)
fin_clst = get_path("isophage_p95_s95_c95_cluster_ani_raw.tsv", extra_path)

df_checkv = pd.read_csv(fin_checkv, sep="\t")
df_genomad_virus = pd.read_csv(fin_genomad_virus, sep="\t")
df_genomad_plasmid = pd.read_csv(fin_genomad_plasmid, sep="\t")
df_iphop = pd.read_csv(fin_iphop, sep=",")
df_vs2 = pd.read_csv(fin_vs2, sep="\t")
df_vs2_cat = pd.read_csv(fin_vs2_cat, sep=",")
df_clst = pd.read_csv(fin_clst, sep="\t", header=None, names=["cluster", "seq_name"])

# concat df_genomad_virus and df_genomad_plasmid
df_genomad = pd.concat([df_genomad_virus, df_genomad_plasmid], axis=0)

# sort df_iphop by column "Confidence score" in descending order, and then remove duplicates based on column "Virus" only keep the first one
df_iphop_one = df_iphop.sort_values(by="Confidence score", ascending=False).drop_duplicates(subset="Virus", keep="first")

# merge df_genomad_virus and df_checkv based on seq_name and contig_id
df = df_genomad_virus.merge(df_checkv, left_on="seq_name", right_on="contig_id", how="inner")
df = df.merge(df_vs2, left_on="seq_name", right_on="seqname", how="left")
df = df.merge(df_iphop_one, left_on="seq_name", right_on="Virus", how="left")

# viral contig names
vcontigs = [x.replace("isophage_", "") for x in df.seq_name.to_list()]

# cluster in df.seq_name
df_clst2 = df_clst[df_clst["cluster"].isin(vcontigs)]
df_clst2.seq_name.to_list()
```

### Extract selected gbks

TBC (to be confirmed): we selected some contigs based on ?? criteria. We use the following script to extract the selected contigs from the original gbk file.

```{python}
import os
from Bio import SeqIO

flist = os.path.join(r.path_data, "sel.list")
fgbk = os.path.join(r.path_data, "viroilsel_canthyd3.gbk")
fout = os.path.join(r.path_target(), "viroilsel_canthyd3_sel.gbk")

with open(flist, "r") as fh:
    ctg_list = [x.strip() for x in fh.readlines()]

recs = list(SeqIO.parse(fgbk, "genbank"))
rec_sel = [x for x in recs if x.id in ctg_list]

with open(fout, "w") as fh:
    SeqIO.write(rec_sel, fh, "genbank")
```

```{python}
```


## Tasks

The first task is ...

## Files written

These files have been written to the target directory, ```r paste0("data/", params$name)```:

```{r list-files-target}
projthis::proj_dir_info(path_target())
```
