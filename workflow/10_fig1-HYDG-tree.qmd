---
title: "10_fig1-HYDG-tree"
title-block-banner: true
author:
  - name: "Jinlong Ru"
    orcid: "0000-0002-6757-6018"
    email: "jinlong.ru@gmail.com"
    affiliations:
      - name: "Institute of Virology, Helmholtz Centre Munich â€“ German Research Center for Environmental Health, 85764 Neuherberg, Germany"
      - neme: "Chair of Prevention of Microbial Diseases, School of Life Sciences Weihenstephan, Technical University of Munich, 85354 Freising, Germany"
date: "2022-11-06"
toc: true
format: gfm
bibliography: refs.bib
params:
  name: "10_fig1-HYDG-tree" # change if you rename file
---

Updated at `r format(Sys.time(), '%Y-%m-%d %H:%M:%S', tz = 'UTC')` UTC.

```{r setup, message=FALSE, include=F}
here::i_am(paste0(params$name, ".qmd"), uuid = "cdc28f4c-4364-4c58-8fa2-c91fc4d1dfd4")
projthis::proj_create_dir_target(params$name, clean = FALSE)
path_target <- projthis::proj_path_target(params$name)
path_source <- projthis::proj_path_source(params$name)
```

# Introduction

We have three phylogenetic trees for three protein families,

1. fam0023_tree.nwk
2. fam0026_tree.nwk
3. fam0253_tree.nwk

There is a table contains annotation of all the proteins in these trees. Annotations include taxonomy, environment etc. Expected output of this task is three phylogenetic trees, with taxonomy and environment annotations.

Trees can be plotted using `ggtree`. Annotations can be added using `ggtreeExtra`. Tutorial can be found [here](https://yulab-smu.top/treedata-book/chapter10.html). One example is [this](https://www.nature.com/articles/s41586-020-2007-4/figures/2).

## Tasks

TODO:

- [ ] Change layout of the tree if necessary

```{r packages}
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(treeducken)
library(ggtree)
library(ggtreeExtra)
library(ggnewscale)

dir_prj <- normalizePath("..")
wd <- here(dir_prj, "data/fig1_HYDG_tree")
```


```{r create_tree function}
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
# This works for the small tree 
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
  
  tree_tbl <- read.tree(ftree) %>%
    as_tibble() %>%
    mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
    mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))

  tree_IMGVR <- tree_tbl %>% 
    dplyr::filter(UVIG != "") %>%
    left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
    mutate(Kingdom = "Viruses")

  tree_nr <- tree_tbl %>%
    dplyr::filter(UVIG == "") %>%
    left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
    mutate(eco3 = "Unknown")

  # tree <- rbind(tree_IMGVR, tree_nr) %>%
  #   as.treedata()
  
  ## ===================== reduce tree at phylum level =========================
  
  # create dataframe with tree data
  tree_data <- rbind(tree_IMGVR, tree_nr)

  # make labels shorter
  tree_data$label[grep("^IMGVR", tree_data$label)] <- tree_data$UVIG[grep("^IMGVR", tree_data$label)]
  
  # create tree as phylo object (easier to manipulate)
  tree_phylo <- as.phylo(tree_data)
  
  # get all possible subtrees
  sub <- subtrees(tree_phylo)
  
  # extract subtrees which leaves have the same phylum
  subs_to_collapse_ind <- which(sapply(sub, function(x) {
    length(unique(tree_data$Phylum[which(tree_data$label %in% x$tip.label)])) == 1
  }))
  
  subs_to_collapse <- sub[subs_to_collapse_ind]
  
  # sort subs_to collapse in decreasing number of tips order
  subs_to_collapse <- subs_to_collapse[order(sapply(subs_to_collapse, function(x) {length(x$tip.label)}),
                                             decreasing = TRUE)]
  
  # collapse selected subtrees
  pruned_phylo <- tree_phylo
  
  for (i in seq(1,length(subs_to_collapse))) {
    if (all(subs_to_collapse[[i]]$tip.label %in% pruned_phylo$tip.label)) {
      pruned_phylo <- treeducken::collapse_clade(list(pruned_phylo), subs_to_collapse[[i]])
      pruned_phylo <- pruned_phylo[[1]]
      # print(c(pruned_phylo$Nnode, length(pruned_phylo$tip.label)))
    }
  }
  
  ## ==================== prepare annotation dataset for the plot ========================
  
  # prepare dataframe with annotations for the plot
  new_tips <- pruned_phylo$tip.label
  pruned_data <- as.data.frame(tree_data[which(tree_data$label %in% new_tips),])
  rownames(pruned_data) <- pruned_data$label
  
  pruned_data$Phylum[which(pruned_data$Phylum=="")] <- NA
  pruned_data$eco3[which(pruned_data$eco3=="")] <- NA
  
  
  pruned_data <- pruned_data[seq(4,9)]
  
  # set colors to always have enough
  my_colors <- c("#669900","#99CC33", "#ccee66","#006699","#3399cc",
                 "#990066","#cc3399","#900808", "#E02929",
                 "#ff6600","#ff9900","#ffcc00", "#FFE788")
  my_colors <- c(colorRampPalette(my_colors)(length(unique(pruned_data$Phylum))-1))
  my_colors2 <- c("#5f0f40","#9a031e","#fb8b24","#BC5210","#0f4c5c")
  my_colors2 <- c(colorRampPalette(my_colors2)(length(unique(pruned_data$eco3))-1))
  
  # my_colors <- rev(c("#fe0000", "#800001", "#fe6a00", "#803400",
  #                "#ffd800", "#806b00", "#00fe21", "#007f0e",
  #                "#0094fe", "#00497e", "#0026ff", "#001280", "#b100fe"))
  
  ##  ================== plot the tree =========================================
  
  p <- ggtree(pruned_phylo, layout = "circular", color="darkgrey", size=0.2) 

  p <- p %<+% pruned_data +
    geom_tippoint(aes(fill=Phylum), size=1.2, alpha=0.7, shape=21, color="transparent",
                  show.legend = FALSE) +
    
    geom_tiplab(color="black", size=1.5, align=TRUE,
                linetype = "dotted", linesize = 0.1) +
  
    geom_fruit(geom=geom_tile,
               mapping=aes(fill=Phylum),
               offset = 0.5,
               width=0.3) +
  
    scale_fill_manual(name="Phylum (inner circle)",
                      guide=guide_legend(keywidth=1.5, keyheight=1.5, ncol=1),
                      values=my_colors, na.value = "white") +
  
    theme(legend.title=element_text(size=15), legend.text=element_text(size=12))
  
  p <- p +
    new_scale_fill() +
    
    geom_fruit(geom=geom_tile,
               mapping=aes(fill=eco3),
               offset = 0.05,
               width=0.2) +
  
    scale_fill_manual(name="Ecosystem (outer circle)",
                      guide=guide_legend(keywidth=1.5, keyheight=1.5, ncol=1),
                      values = my_colors2, na.value = "white")
                      # values = my_colors[c(13,11,9,7,5)])
  
  ## =============================================================================

  # p <- ggtree(tree, layout="equal_angle", color="grey") +
  #   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
  #   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
  
  
  # output file name is basename of ftree without extension
  ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
  
  # return(p)
}
```


```{r split create_tree function for big trees}
## ============== split the function to work with big trees ======================

# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_data <- function(ftree, df_anno_imgvr, df_anno_nr) {
  
  tree_tbl <- read.tree(ftree) %>%
    as_tibble() %>%
    mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
    mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))

  tree_IMGVR <- tree_tbl %>% 
    dplyr::filter(UVIG != "") %>%
    left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
    mutate(Kingdom = "Viruses")

  tree_nr <- tree_tbl %>%
    dplyr::filter(UVIG == "") %>%
    left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
    mutate(eco3 = "Unknown")

  # tree <- rbind(tree_IMGVR, tree_nr) %>%
  #   as.treedata()
  
  # create dataframe with tree data
  tree_data <- rbind(tree_IMGVR, tree_nr)
  
    # make labels shorter
  tree_data$label[grep("^IMGVR", tree_data$label)] <- tree_data$UVIG[grep("^IMGVR", tree_data$label)]
  
  return(tree_data)
}

compute_subtrees <- function(tree_data) {
  
  # create tree as phylo object (easier to manipulate)
  tree_phylo <- as.phylo(tree_data)
  
  # get all possible subtrees
  sub <- subtrees(tree_phylo)
  return(sub)
}

prune_tree <- function(tree_data, sub) {
  
  ## ===================== reduce tree at phylum level =========================
  # create tree as phylo object (easier to manipulate)
  tree_phylo <- as.phylo(tree_data)
  
  # extract subtrees which leaves have the same phylum
  subs_to_collapse_ind <- which(sapply(sub, function(x) {
    length(unique(tree_data$Phylum[which(tree_data$label %in% x$tip.label)])) == 1
  }))
  
  subs_to_collapse <- sub[subs_to_collapse_ind]
  
  # sort subs_to collapse in decreasing number of tips order
  subs_to_collapse <- subs_to_collapse[order(sapply(subs_to_collapse, function(x) {length(x$tip.label)}),
                                             decreasing = TRUE)]
  
  # collapse selected subtrees
  pruned_phylo <- tree_phylo
  
  for (i in seq(1,length(subs_to_collapse))) {
    if (all(subs_to_collapse[[i]]$tip.label %in% pruned_phylo$tip.label)) {
      pruned_phylo <- treeducken::collapse_clade(list(pruned_phylo), subs_to_collapse[[i]])
      pruned_phylo <- pruned_phylo[[1]]
      # print(c(pruned_phylo$Nnode, length(pruned_phylo$tip.label)))
    }
  }
  
  return(pruned_phylo)
  
}
  

plot_tree <- function(tree_data, pruned_phylo, filename="nome") {
  
  ## ==================== prepare annotation dataset for the plot ========================
  
  # prepare dataframe with annotations for the plot
  new_tips <- pruned_phylo$tip.label
  pruned_data <- as.data.frame(tree_data[which(tree_data$label %in% new_tips),])
  
  # remove duplicates from labels so they can be used as rownames
  if (length(new_tips)!=length(unique(new_tips))) {

    couples <- as.data.frame(table(pruned_phylo$tip.label))
    couples <- couples$Var1[which(couples$Freq!=1)]

    for (x in couples) {
      second <- paste(x, "_2", sep = "")
      pruned_phylo$tip.label[which(pruned_phylo$tip.label==x)][2] <- second
      pruned_data$label[which(pruned_data$label==x)][2] <- second
    }
  }
  
  rownames(pruned_data) <- pruned_data$label
  
  # Uniform NAs
  pruned_data$Phylum[which(pruned_data$Phylum=="")] <- NA
  pruned_data$eco3[which(pruned_data$eco3=="")] <- NA
  pruned_data$Phylum[which(pruned_data$Phylum=="Unknown")] <- NA
  pruned_data$eco3[which(pruned_data$eco3=="Unknown")] <- NA
  
  
  pruned_data <- pruned_data[seq(4,9)]
  
  # set colors to always have enough
  my_colors <- c("#669900","#99CC33", "#ccee66","#006699","#3399cc",
                 "#990066","#cc3399","#900808", "#E02929",
                 "#ff6600","#ff9900","#ffcc00", "#FFE788")
  my_colors_phy <- c(colorRampPalette(my_colors)(length(unique(pruned_data$Phylum))-1))
  my_colors_eco <- c(colorRampPalette(my_colors)(length(unique(pruned_data$eco3))-1))
  
  # my_colors <- rev(c("#fe0000", "#800001", "#fe6a00", "#803400",
  #                "#ffd800", "#806b00", "#00fe21", "#007f0e",
  #                "#0094fe", "#00497e", "#0026ff", "#001280", "#b100fe"))
  # my_colors2 <- c("#5f0f40","#9a031e","#fb8b24","#BC5210","#0f4c5c")
  
  ##  ================== plot the tree =========================================
  
  p <- ggtree(pruned_phylo, layout = "circular", color="grey", size=0.2) 

  p <- p %<+% pruned_data +
    geom_tippoint(aes(fill=Phylum), size=0.7, alpha=0.7, shape=21, 
                  color="white", stroke=0.01,
                  show.legend = FALSE) +
    
    geom_tiplab(color="black", size=0.4, align=TRUE,
                linetype = 0,
                # linetype = "dashed", linesize = 0.000001,
                geom = "text") +
  
    geom_fruit(geom=geom_tile,
               mapping=aes(fill=Phylum),
               offset = 0.12,
               width=0.5) +
  
    scale_fill_manual(name="Phylum (inner circle)",
                      guide=guide_legend(keywidth=1, keyheight=1, ncol=2),
                      values=my_colors_phy, na.value = "lightgrey") +
  
    theme(legend.title=element_text(size=12), legend.text=element_text(size=9))
  
  p <- p +
    new_scale_fill() +
    
    geom_fruit(geom=geom_tile,
               mapping=aes(fill=eco3),
               offset = 0.09,
               width=0.4) +
  
    scale_fill_manual(name="Ecosystem (outer circle)",
                      guide=guide_legend(keywidth=1, keyheight=1, ncol=1),
                      values = my_colors_eco, na.value = "lightgrey")
  
  ## =============================================================================

  # output file name is basename of ftree without extension
  # ggsave(filename=path_target(paste0(basename(tree_data), ".pdf")), plot=p, width = 20, height = 13)
  ggsave(filename=path_target(paste0(filename, ".pdf")), plot=p, width = 20, height = 13)

  # return(p)
}
```


### Protein annotation

Proteins from three sources,

1. IMGVR, which include query viral proteins from IMGVR database.
2. Custom data, which include query viral proteins form other sources.
3. NR, which include proteins of bacteria, archaea, eukaryota and viruses in NCBI NR database that is homologous of viral proteins in 1 and 2.

Annotations of NR are stored in `df_anno_nr`, and saved to file `annotation_nr.tsv`.

```{r protein host taxonomy annotation from NR}
# taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
# 
# name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxa", "taxid")) %>%
#   # sort by taxid in ascending order
#   arrange(taxid) %>%
#   # drop duplicates by taxa
#   distinct(taxa, .keep_all = TRUE)
# 
# df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>% 
#   setnames(colnames(.), c("protid", "taxa")) %>%
#   left_join(name2taxid, by = "taxa") %>%
#   left_join(taxid2lineage, by = "taxid") %>%
#   distinct(protid, .keep_all = TRUE) %>%
#   # replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
# 
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv.gz"))
```

Annotations of IMGVR and others are stored in `df_anno_imgvr`, and saved to file `annotation_imgvr.tsv`.

```{r tree node annotation of protines on 3096 IMGVR contigs}
# df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
#   setnames(colnames(.), make.names(colnames(.))) %>%
#   mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
#   dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
#   # split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
#   tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
#   # split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
#   tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
#   # split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
#   tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
#   # replace all "^.*__" with ""
#   mutate_all(funs(str_replace_all(., "^.*__", "")))
# 
# # write protein taxonomy annotation to file
# fwrite(df_anno_imgvr, path_target("annotation_imgvr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_imgvr <- fread(here(wd, "annotation_imgvr.tsv.gz"))
```


### Tree visualization

Phylogenetic tree of each protein family was inferred using the maximum likelihood method with the fasttree program [@2010-FastTree_Price]. The best-scoring ML tree was selected from 100 bootstrap replicates. Taxonomy annotation of each protein was obtained from the hit results and normalized using Taxonkit software [@2021-TaxonKit_Shen]. The tree was visualized using ggtree software [@2022-Ggtree_Xu].

TODO:

- [ ] Plot tree for fam0253

- [ ] Collapse tree to phylum level. That is, if nodes in the tree have same phylum, collapse them into one node. Because each tree contains thousands of nodes, we hope using this approach, we can have fewer nodes and make the tree easier to visualize.

- [ ] Add Phylum name, environment source as a circular heatmap in the outside of the tree.


```{r using alkb.nwk as test}
# Create, prune and plot the small test tree

create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
```



Files were saved to `r path_target()`.

TODO:

- [ ] If the plot looks good, plot for all three trees

```{r tree visualization}
# ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
#   # set names using famid
#   setNames(stringr::str_extract(., "fam\\d+"))

# create tree visualization for each protein family using function `create_tree`
# very time-consuming
# lapply(ftrees, create_tree, df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)
# create_tree(ftrees[1], df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)

## ===========================================================================
# Prepare data to plot

# ftree_data <- lapply(ftrees, create_data, df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)
# 
# sub_0023 <- compute_subtrees(ftree_data$fam0023)
# sub_0026 <- compute_subtrees(ftree_data$fam0026)
# sub_0253 <- compute_subtrees(ftree_data$fam0253)
# 
# ftree_subs <- list("fam0023" = sub_0023,
#                    "fam0026" = sub_0026,
#                    "fam0253" = sub_0253)
# 
# ftree_pruned <- mapply(prune_tree, ftree_data, ftree_subs, 
#                        SIMPLIFY = FALSE)
#
# save(ftree_data, ftree_pruned, here(wd, "ftree_ready2plot.RData"))

## ===========================================================================
# Load pruned trees to plot quickly

load(here(wd, "ftree_ready2plot.RData"))

mapply(plot_tree, ftree_data, ftree_pruned, 
       c("fam0023", "fam0026", "fam0253"),
       SIMPLIFY = FALSE)
```


## Files written

These files have been written to the target directory, ```r paste0("data/", params$name)```:

```{r list-files-target}
projthis::proj_dir_info(path_target())
```

### References
