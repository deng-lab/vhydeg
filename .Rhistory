a <- node.height(tr)
a
tr$tip.label
here::i_am(paste0(params$name, ".qmd"), uuid = "cdc28f4c-4364-4c58-8fa2-c91fc4d1dfd4")
projthis::proj_create_dir_target(params$name, clean = FALSE)
install.packages("projthis")
remotes::install_github("ijlyttle/projthis")
here::i_am(paste0(params$name, ".qmd"), uuid = "cdc28f4c-4364-4c58-8fa2-c91fc4d1dfd4")
projthis::proj_create_dir_target(params$name, clean = FALSE)
path_target <- projthis::proj_path_target(params$name)
path_source <- projthis::proj_path_source(params$name)
library(here)
library(conflicted)
install.packages("conflicted")
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
install.packages("treedataverse")
BiocManager::install("YuLab-SMU/treedataverse")
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(ggtree)
dir_prj <- normalizePath("..")
wd <- here(dir_prj, "data/fig1_HYDG_tree")
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
p
# taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
#
# name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxa", "taxid")) %>%
#   # sort by taxid in ascending order
#   arrange(taxid) %>%
#   # drop duplicates by taxa
#   distinct(taxa, .keep_all = TRUE)
#
# df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
#   setnames(colnames(.), c("protid", "taxa")) %>%
#   left_join(name2taxid, by = "taxa") %>%
#   left_join(taxid2lineage, by = "taxid") %>%
#   distinct(protid, .keep_all = TRUE) %>%
#   # replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv.gz"))
install.packages("R.utils")
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv.gz"))
#   tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
#   # split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
#   tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
#   # split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
#   tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
#   # replace all "^.*__" with ""
#   mutate_all(funs(str_replace_all(., "^.*__", "")))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_imgvr, path_target("annotation_imgvr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_imgvr <- fread(here(wd, "annotation_imgvr.tsv.gz"))
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
# create tree visualization for each protein family using function `create_tree`
# very time-consuming
# lapply(ftrees, create_tree, df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)
ftrees
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
print(tree_tbl)
prova <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
print(tree_tbl)
# tree_IMGVR <- tree_tbl %>%
#   dplyr::filter(UVIG != "") %>%
#   left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
#   mutate(Kingdom = "Viruses")
#
# tree_nr <- tree_tbl %>%
#   dplyr::filter(UVIG == "") %>%
#   left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
#   mutate(eco3 = "Unknown")
#
# tree <- rbind(tree_IMGVR, tree_nr) %>%
#   as.treedata()
#
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
a <- prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
View(a)
View(a)
setwd()
getwd()
prova <- function(ftree, df_anno_imgvr, df_anno_nr) {
# tree_tbl <- read.tree(ftree) %>%
#   as_tibble() %>%
#   mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
#   mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
return(tree_IMGVR)
#
# tree_nr <- tree_tbl %>%
#   dplyr::filter(UVIG == "") %>%
#   left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
#   mutate(eco3 = "Unknown")
#
# tree <- rbind(tree_IMGVR, tree_nr) %>%
#   as.treedata()
#
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
a <- prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
View(a)
prova <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
return(tree_IMGVR)
#
# tree_nr <- tree_tbl %>%
#   dplyr::filter(UVIG == "") %>%
#   left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
#   mutate(eco3 = "Unknown")
#
# tree <- rbind(tree_IMGVR, tree_nr) %>%
#   as.treedata()
#
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
a <- prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
View(df_anno_imgvr)
View(a)
View(a)
View(df_anno_imgvr)
prova <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
return(tree_nr)
#
# tree <- rbind(tree_IMGVR, tree_nr) %>%
#   as.treedata()
#
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
a <- prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
View(a)
rm(a)
rm(prova)
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
return(tree)
}
create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
a <- create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
a
prova <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
return(tree)
# p <- ggtree(tree, layout="equal_angle", color="grey") +
#   geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
#   geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# # output file name is basename of ftree without extension
# ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
tr <- prova(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
ggtree(tr, layout = "equal_angle, color="grey)
ggtree(tr, layout = "equal_angle", color="grey")
ggtree(tr, layout = "equal_angle")
ggtree(tr, layout = "fan")
ggtree(tr, layout = "circular")
ggtree(tr, layout = "circular", color="grey")
tr
rm(prova)
rm(tr)
rm(a)
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
ftree <- here(wd, "top_alkb_tree.nwk")
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
tree_IMGVR
tree
tree_nr
tree[23]
tree[23]$parent
tree_data <- rbind(tree_IMGVR, tree_nr)
tree_data
unique(tree_data$Phylum)
parents <- sapply(unique(tree_data$Phylum), function(x){
x = unique(tree_data$parent[which(tree_data$Phylum==x)])
})
parents
tree_data
par <- unique(tree_data$parent)
length(par)
par
par <- tree$nodes
# all internal nodes
par <- unique(tree_data$parent)
tree_data
# all internal nodes
par <- unique(tree_data$parent)
to_collapse <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))) {
append(to_collapse, i)
}
}
length(to_collapse)
which(tree_data$parent==800)
which(tree_data$parent==801)
tree_data$parent
which(tree_data$parent==1307)
which(tree_data$parent==1307)
children <- which(tree_data$parent==1307)
tree_data$Phylum[children]
unique(tree_data$Phylum[children])
length(unique(tree_data$Phylum[children]))
par <- unique(tree_data$parent)
to_collapse <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
append(to_collapse, i)
}
}
length(to_collapse)
to_collapse
append(to_collapse, 800)
to_collapse
par <- unique(tree_data$parent)
to_collapse <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
to_collapse <- append(to_collapse, i)
}
}
length(to_collapse)
to_collapse
mapply(function(x,y) x > y, tree_data$parent, tree_data$node)
all(mapply(function(x,y) x > y, tree_data$parent, tree_data$node))
all(mapply(function(x,y) x > y, tree_data$parent, tree_data$node))
which(mapply(function(x,y) x > y, tree_data$parent, tree_data$node)==F)
tree_data[which(mapply(function(x,y) x > y, tree_data$parent, tree_data$node)==F),]
sapply(omog_phy, function(x) ifelse(tree_data$parent[x] %in% omog_phy,
no = to_collapse <- append(to_collapse, x)))
par <- unique(tree_data$parent)
omog_phy <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
omog_phy <- append(omog_phy, i)
}
}
to_collapse <- vector()
sapply(omog_phy, function(x) ifelse(tree_data$parent[x] %in% omog_phy,
no = to_collapse <- append(to_collapse, x)))
-F
!F
to_collapse <- vector()
sapply(omog_phy, function(x) {
if (! tree_data$parent[x] %in% omog_phy) to_collapse <- append(to_collapse, x)
})
par <- unique(tree_data$parent)
omog_phy <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
omog_phy <- append(omog_phy, i)
}
}
to_collapse <- vector()
for (i in omog_phy) {
if (! tree_data$parent[x] %in% omog_phy) to_collapse <- append(to_collapse, x)
}
par <- unique(tree_data$parent)
omog_phy <- vector()
for (i in par) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
omog_phy <- append(omog_phy, i)
}
}
to_collapse <- vector()
for (i in omog_phy) {
if (! tree_data$parent[i] %in% omog_phy) to_collapse <- append(to_collapse, i)
}
length(omog_phy)
length(to_collapse)
to_collapse
! tree_data$parent[831] %in% omog_phy
tree_data$parent[831] %in% omog_phy
omog_phy <- vector()
for (i in unique(tree_data$parent)) {
children <- which(tree_data$parent==i)
if (length(unique(tree_data$Phylum[children]))==1) {
omog_phy <- append(omog_phy, i)
}
}
to_collapse <- vector()
for (i in omog_phy) {
if (! tree_data$parent[i] %in% omog_phy) to_collapse <- append(to_collapse, i)
}
ggtree(tree, layout = "fan") +
collapse(tree, to_collapse)
p <- ggtree(tree, layout = "fan")
p <- ggtree(tree, layout = "circular")
p <- p %>% collapse(p, node=to_collapse)
p <- p %>% collapse(p, node=812)
p <- ggtree(tree, layout = "circular")
p <- p %>% collapse(node=812)
p
p <- p %>% collapse(node=to_collapse)
p <- p %>% apply(to_collapse, collapse)
p <- ggtree(tree, layout = "circular")
p <- p %>% apply(to_collapse, collapse)
p <- ggtree(tree, layout = "circular")
p <- p %>% sapply(to_collapse, collapse)
p <- p %>% sapply(to_collapse, collapse())
p <- ggtree(tree, layout = "circular")
sapply(to_collapse, function(x) collapse(p, x))
sapply(to_collapse, function(x) collapse(p, x))
p <- ggtree(tree, layout = "circular")
for (i in to_collapse) collapse(p, i)
print(p)
p <- ggtree(tree, layout = "circular")
p
for (i in to_collapse) {
p <- collapse(p, node=i) +
geom_point2(aes(subset=(node==i)), shape=23, size=5, fill='red')
}
p
to_collapse
p <- ggtree(tree, layout = "circular")
collapse(p, 1162, 'mixed', fill='steelblue')
p <- ggtree(tree, layout = "circular")
collapse(p, 1162, 'mixed', fill='red')
p <- ggtree(tree, layout = "circular")
for (i in to_collapse) collapse(i, 1162, 'mixed', fill='red')
p <- ggtree(tree, layout = "circular")
for (i in to_collapse) collapse(p, i, 'mixed', fill='red')
p
to_collapse
tree_data[which(tree_data$parent)=p=par]
tree_data[which(tree_data$parent)==par]
tree_data[which(tree_data$parent==par)]
tree_data[which(tree_data$parent=%in%ar)]
tree_data[which(tree_data$parent=%in%par),]
tree_data[which(tree_data$parent%in%par),]
dim(tree_data)
dim(tree_data[which(tree_data$Phylum==""),])
which(tree_data$Phylum=="")
tree_data[which(tree_data$Phylum==""),]
tree_data[which(tree_data$Phylum==NA),]
tree_data[which(tree_data$Phylum==NA),]
unique(tree_data$Phylum)
tree_data[which(is.na(tree_data$Phylum)),]
