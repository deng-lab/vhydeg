<<<<<<< HEAD
usethis::use_gpl3_license()
usethis::use_git()
setwd("~/github/rujinlong/p0062")
renv::restore()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(shiny)
library(shinydashboard)
library(shinythemes)
library(plotly)
library(reactable)
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(here)
library(data.table)
library(scales)
library(speedyseq)
library(crosstalk)
library(gggenomes)
# --------  Read data ----------
source(here("R/import_data.R"))
library(here)
# --------  Read data ----------
prj_path <- normalizePath("..")
runApp('app')
source(here(prj_path, "R/import_data.R"))
# --------  Read data ----------
prj_path <- normalizePath("")
# --------  Read data ----------
prj_path <- normalizePath(".")
source(here(prj_path, "R/import_data.R"))
here(prj_path, "R/import_data.R")
source(here(prj_path, "R/import_data.R"))
library(JBrowseR)
library(here)
#| context: setup
library(JBrowseR)
library(here)
dpath <- here("pipeline")
dpath_bac <- here("pipeline/bacannot/output/D45")
if (FALSE) {data_server <- serve_data(dpath_bac)}
assembly <- assembly("http://127.0.0.1:5000/annotation/D45.fna", bgzip = F)
tracks <- tracks(track_feature("http://127.0.0.1:5000/annotation/D45.gff", assembly))
#| panel: sidebar
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
#| panel: fill
plotOutput("distPlot")
JBrowseROutput("browserOutput", height = "400px")
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$browserOutput <- renderJBrowseR(
JBrowseR("View", assembly = assembly, tracks = tracks)
)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
dpath
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
renv::restore()
renv::snapshot()
renv::status()
renv::restore()
renv::snapshot()
renv::install("shinythemes")
renv::install("reactable")
renv::install("pheatmap")
renv::install(c("heatmaply", "gggenomes"))
renv::install(c("heatmaply"))
renv::status()
renv::snapshot()
library(here)
library(tidyverse)
library(data.table)
dpath <- here("../pipeline/canthyd")
dpath <- here("pipeline/canthyd")
fp_isobp <- here("pipeline/canthyd/isophage_bac_all_canthyd.tsv")
library(here)
library(tidyverse)
library(data.table)
dpath <- here("pipeline/canthyd")
fp_isobp <- here("pipeline/canthyd/isophage_bac_all_canthyd.tsv")
fp_isophage <- here("pipeline/canthyd/isophage_and_bac_dramv_canthyd.tsv")
fp_wtp <- here("pipeline/canthyd/isophage_bac_all_wtp.csv")
fp_plassprot <- here("pipeline/canthyd/virome_plassProt_canthyd.tsv")
fp_virbin <- here("pipeline/canthyd/virome_dramv_geneBIN_canthyd.tsv")
fp_virctg <- here("pipeline/canthyd/virome_dramv_geneCTG_canthyd.tsv")
df_isobp <- fread(fp_isobp) %>%
mutate(source = "Isolated bacteria and phages")
df_isophage <- fread(fp_isophage) %>%
mutate(source = "Isolated phages (DRAMv)")
df_wtp <- fread(fp_wtp) %>%
dplyr::select(-V1)
df_plassprot <- fread(fp_plassprot) %>%
mutate(source = "Virome PLASS assembled proteins")
df_virbin <- fread(fp_virbin) %>%
mutate(source = "Virome bins")
df_virctg <- fread(fp_virctg) %>%
mutate(source = "Virome contigs")
df_canthyd <- rbind(df_isobp, df_isophage, df_plassprot, df_virbin, df_virctg)
df_canthyd %>%
dplyr::filter(source != "Isolated bacteria and phages") %>%
dplyr::filter(bitscore >=20) %>%
ggplot(aes(x=bitscore, fill=source)) +
# geom_histogram(aes(y=..density..), binwidth = 5) +
geom_histogram(binwidth = 5) +
# geom_density(aes(fill=source), alpha=0.2) +
geom_vline(aes(xintercept=50), color="blue", linetype="dashed") +
facet_grid(. ~ source)
hist(df_virome$bitscore)
df_virome %>%
dplyr::filter(bitscore>=30)
shiny::runApp()
renv::restore()
renv::status()
renv::snapshot()
=======
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nonIMGVR) %>%
as.treedata()
View(tree_IMGVR)
View(df_anno_imgvr)
View(tree_IMGVR)
df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
setnames(colnames(.), make.names(colnames(.))) %>%
mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
# split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
# split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
# split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";")
View(df_anno_imgvr)
tree_tbl <- read.tree(ftrees[["fam0253"]]) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG")
tree_nonIMGVR <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(anno[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nonIMGVR) %>%
as.treedata()
View(tree_IMGVR)
View(tree_nonIMGVR)
View(tree_nonIMGVR)
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
View(tree_IMGVR)
df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
setnames(colnames(.), make.names(colnames(.))) %>%
mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
# split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
# split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
# split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
# replace all "^.*__" with ""
mutate_all(funs(str_replace(., "^.*__", "")))
df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
setnames(colnames(.), make.names(colnames(.))) %>%
mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
# split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
# split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
# split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
# replace all "^.*__" with ""
mutate_all(funs(str_replace_all(., "^.*__", "")))
View(df_anno_imgvr)
tree_tbl <- read.tree(ftrees[["fam0253"]]) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nonIMGVR <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(anno[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nonIMGVR)
View(tree)
tree <- rbind(tree_IMGVR, tree_nonIMGVR) %>%
as.treedata()
p <- ggtree(tree, layout="circular") +
geom_tiplab2(aes(label=Phylum, color = Phylum), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Class), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
View(tree_IMGVR)
p <- ggtree(tree, layout="circular") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="circular", branch.length='none', open.angle=180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="fan", branch.length='none', open.angle=180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=1, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="fan", open.angle=180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=1, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="fan") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="circular", open.angle=180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="circular", branch.length='none', open.angle=180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.1, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="circular", open.angle = 180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="fan", open.angle = 180) +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
p <- ggtree(tree, layout="circular", open.angle = 180, branch.length = "none") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=2, alpha=0.7)
ggsave(filename=path_target("test_tree.pdf"), plot = p, width = 25, height = 13)
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(ggtree)
dir_prj <- normalizePath("..")
wd <- here(dir_prj, "hpc/fig1_HYDG_tree")
save_ggtree <- function(ftree, anno, fout, fwidth = 9, fheight = 5) {
# anno <- read_tsv(fanno, show_col_types = FALSE) %>%
#     mutate(label = Name) %>%
#     mutate(taxa = str_replace(Taxonomy, ".*;", "")) %>%
#     dplyr::select(c(label, taxa))
tree <- read.tree(ftree) %>%
as_tibble() %>%
left_join(anno, by = "label") %>%
as.treedata()
ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=taxa), size=0, color="black", offset=0.5) +
geom_tippoint(aes(color=taxa), size=0.8, alpha=0.5)
ggsave(fout, width = fwidth, height = fheight, dpi = 600)
}
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=here(wd, paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxa", "taxid")) %>%
# sort by taxid in ascending order
arrange(taxid) %>%
# drop duplicates by taxa
distinct(taxa, .keep_all = TRUE)
df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
setnames(colnames(.), c("protid", "taxa")) %>%
left_join(name2taxid, by = "taxa") %>%
left_join(taxid2lineage, by = "taxid") %>%
distinct(protid, .keep_all = TRUE) %>%
# replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
Class = ifelse(is.na(Class), "Unknown", Class),
Order = ifelse(is.na(Order), "Unknown", Order),
Family = ifelse(is.na(Family), "Unknown", Family),
Genus = ifelse(is.na(Genus), "Unknown", Genus),
Species = ifelse(is.na(Species), "Unknown", Species))
# write protein taxonomy annotation to file
fwrite(df_anno_nr, path_target("protein_taxonomy.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
setnames(colnames(.), make.names(colnames(.))) %>%
mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
# split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
# split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
# split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
# replace all "^.*__" with ""
mutate_all(funs(str_replace_all(., "^.*__", "")))
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
# create tree
lapply(ftrees, create_tree(., df_anno_nr, df_anno_imgvr))
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
# create tree visualization for each protein family using function `create_tree` and lapply
lapply(ftrees, create_tree, df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
# create tree visualization for each protein family using function `create_tree` and lapply
lapply(ftrees, create_tree, df_anno_nr = df_anno_nr, df_anno_imgvr = df_anno_imgvr)
renv::snapshot()
here::i_am(paste0(params$name, ".qmd"), uuid = "cdc28f4c-4364-4c58-8fa2-c91fc4d1dfd4")
projthis::proj_create_dir_target(params$name, clean = FALSE)
path_target <- projthis::proj_path_target(params$name)
path_source <- projthis::proj_path_source(params$name)
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(ggtree)
dir_prj <- normalizePath("..")
wd <- here(dir_prj, "hpc/fig1_HYDG_tree")
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxa", "taxid")) %>%
# sort by taxid in ascending order
arrange(taxid) %>%
# drop duplicates by taxa
distinct(taxa, .keep_all = TRUE)
df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
setnames(colnames(.), c("protid", "taxa")) %>%
left_join(name2taxid, by = "taxa") %>%
left_join(taxid2lineage, by = "taxid") %>%
distinct(protid, .keep_all = TRUE) %>%
# replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
Class = ifelse(is.na(Class), "Unknown", Class),
Order = ifelse(is.na(Order), "Unknown", Order),
Family = ifelse(is.na(Family), "Unknown", Family),
Genus = ifelse(is.na(Genus), "Unknown", Genus),
Species = ifelse(is.na(Species), "Unknown", Species))
# write protein taxonomy annotation to file
fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
View(df_anno_nr)
table(df_anno_nr$Kingdom)
# taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
#
# name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxa", "taxid")) %>%
#   # sort by taxid in ascending order
#   arrange(taxid) %>%
#   # drop duplicates by taxa
#   distinct(taxa, .keep_all = TRUE)
#
# df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
#   setnames(colnames(.), c("protid", "taxa")) %>%
#   left_join(name2taxid, by = "taxa") %>%
#   left_join(taxid2lineage, by = "taxid") %>%
#   distinct(protid, .keep_all = TRUE) %>%
#   # replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv"))
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(ggtree)
dir_prj <- normalizePath("..")
wd <- here(dir_prj, "hpc/fig1_HYDG_tree")
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
setnames(colnames(.), c("taxa", "taxid")) %>%
# sort by taxid in ascending order
arrange(taxid) %>%
# drop duplicates by taxa
distinct(taxa, .keep_all = TRUE)
df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
setnames(colnames(.), c("protid", "taxa")) %>%
left_join(name2taxid, by = "taxa") %>%
left_join(taxid2lineage, by = "taxid") %>%
distinct(protid, .keep_all = TRUE) %>%
# replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
Class = ifelse(is.na(Class), "Unknown", Class),
Order = ifelse(is.na(Order), "Unknown", Order),
Family = ifelse(is.na(Family), "Unknown", Family),
Genus = ifelse(is.na(Genus), "Unknown", Genus),
Species = ifelse(is.na(Species), "Unknown", Species))
# write protein taxonomy annotation to file
fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv"))
df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
setnames(colnames(.), make.names(colnames(.))) %>%
mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
# split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
# split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
# split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
# replace all "^.*__" with ""
mutate_all(funs(str_replace_all(., "^.*__", "")))
# write protein taxonomy annotation to file
fwrite(df_anno_imgvr, path_target("annotation_imgvr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_imgvr <- fread(here(wd, "annotation_imgvr.tsv"))
# taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
#
# name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxa", "taxid")) %>%
#   # sort by taxid in ascending order
#   arrange(taxid) %>%
#   # drop duplicates by taxa
#   distinct(taxa, .keep_all = TRUE)
#
# df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
#   setnames(colnames(.), c("protid", "taxa")) %>%
#   left_join(name2taxid, by = "taxa") %>%
#   left_join(taxid2lineage, by = "taxid") %>%
#   distinct(protid, .keep_all = TRUE) %>%
#   # replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv"))
library(here)
library(conflicted)
library(tidyverse)
library(treedataverse)
library(data.table)
library(tidytree)
library(ape)
library(ggtree)
dir_prj <- normalizePath("..")
wd <- here(dir_prj, "data/fig1_HYDG_tree")
# function to read the ".nwk" tree file, plot using ggtree, and save to pdf file
create_tree <- function(ftree, df_anno_imgvr, df_anno_nr) {
tree_tbl <- read.tree(ftree) %>%
as_tibble() %>%
mutate(UVIG = ifelse(str_detect(label, "^IMGVR"), label, "")) %>%
mutate(UVIG = str_replace_all(UVIG, "\\|.*", ""))
tree_IMGVR <- tree_tbl %>%
dplyr::filter(UVIG != "") %>%
left_join(df_anno_imgvr[, c("UVIG", "Kingdom", "Phylum", "Class", "eco3")], by = "UVIG") %>%
mutate(Kingdom = "Viruses")
tree_nr <- tree_tbl %>%
dplyr::filter(UVIG == "") %>%
left_join(df_anno_nr[, c("protid", "Kingdom", "Phylum", "Class")], by = c("label" = "protid")) %>%
mutate(eco3 = "Unknown")
tree <- rbind(tree_IMGVR, tree_nr) %>%
as.treedata()
p <- ggtree(tree, layout="equal_angle", color="grey") +
geom_tiplab2(aes(label=Kingdom, color = Kingdom), size=0, color="black", offset=0) +
geom_tippoint(aes(color=Kingdom), size=0.2, alpha=0.7)
# output file name is basename of ftree without extension
ggsave(filename=path_target(paste0(basename(ftree), ".pdf")), plot=p, width = 20, height = 13)
}
# taxid2lineage <- fread(here(wd, "nf_tmp_taxaid2lineage.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxid", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
#
# name2taxid <- fread(here(wd, "nf_tmp_name2taxid.tsv.gz"), header=F) %>%
#   setnames(colnames(.), c("taxa", "taxid")) %>%
#   # sort by taxid in ascending order
#   arrange(taxid) %>%
#   # drop duplicates by taxa
#   distinct(taxa, .keep_all = TRUE)
#
# df_anno_nr <- fread(here(wd, "targets_taxa.tsv"), header = F) %>%
#   setnames(colnames(.), c("protid", "taxa")) %>%
#   left_join(name2taxid, by = "taxa") %>%
#   left_join(taxid2lineage, by = "taxid") %>%
#   distinct(protid, .keep_all = TRUE) %>%
#   # replace NA with "Unknown" in Kingdom, Phylum, Class, Order, Family, Genus, Species
#   mutate(Kingdom = ifelse(is.na(Kingdom), "Unknown", Kingdom),
#          Phylum = ifelse(is.na(Phylum), "Unknown", Phylum),
#          Class = ifelse(is.na(Class), "Unknown", Class),
#          Order = ifelse(is.na(Order), "Unknown", Order),
#          Family = ifelse(is.na(Family), "Unknown", Family),
#          Genus = ifelse(is.na(Genus), "Unknown", Genus),
#          Species = ifelse(is.na(Species), "Unknown", Species))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_nr, path_target("annotation_nr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_nr <- fread(here(wd, "annotation_nr.tsv.gz"))
# df_anno_imgvr <- fread(here(wd, "HYDGfam_contig_info2.tsv")) %>%
#   setnames(colnames(.), make.names(colnames(.))) %>%
#   mutate(Host.taxonomy.prediction = ifelse(Host.prediction.method=="Isolate taxonomy", Host.taxonomy.prediction, "")) %>%
#   dplyr::select(c(UVIG, Ecosystem.classification, Topology, Taxonomic.classification, Host.taxonomy.prediction)) %>%
#   # split Taxonomic.classification to Domain, Kingdom, Phylum, Class, Order, Family, Genus based on ";"
#   tidyr::separate(Taxonomic.classification, c("Domain", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";") %>%
#   # split Host.taxonomytidyr::.prediction to host_Kingdom, host_Phylum, host_Class, host_Order, host_Family, host_Genus, host_Species based on ";"
#   tidyr::separate(Host.taxonomy.prediction, c("host_Kingdom", "host_Phylum", "host_Class", "host_Order", "host_Family", "host_Genus", "host_Species"), sep = ";") %>%
#   # split Ecosystem.classification to eco1, eco2, eco3, eco4 based on ";"
#   tidyr::separate(Ecosystem.classification, c("eco1", "eco2", "eco3", "eco4"), sep = ";") %>%
#   # replace all "^.*__" with ""
#   mutate_all(funs(str_replace_all(., "^.*__", "")))
#
# # write protein taxonomy annotation to file
# fwrite(df_anno_imgvr, path_target("annotation_imgvr.tsv"), sep = "\t", quote = F, row.names = F)
df_anno_imgvr <- fread(here(wd, "annotation_imgvr.tsv.gz"))
ftrees <- list.files(here(wd), pattern = "fam.*_tree.nwk", full.names = T) %>%
# set names using famid
setNames(stringr::str_extract(., "fam\\d+"))
ftrees
# create
create_tree(ftrees[["fam0253"]], df_anno_imgvr, df_anno_nr)
# using fam0253
# You can test
create_tree(here(wd, "alkb.nwk"), df_anno_imgvr, df_anno_nr)
create_tree(here(wd, "top_alkb_tree.nwk"), df_anno_imgvr, df_anno_nr)
>>>>>>> 27aca02 (ignore big data)
