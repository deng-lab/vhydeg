usethis::use_gpl3_license()
usethis::use_git()
setwd("~/github/rujinlong/p0062")
renv::restore()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(shiny)
library(shinydashboard)
library(shinythemes)
library(plotly)
library(reactable)
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(here)
library(data.table)
library(scales)
library(speedyseq)
library(crosstalk)
library(gggenomes)
# --------  Read data ----------
source(here("R/import_data.R"))
library(here)
# --------  Read data ----------
prj_path <- normalizePath("..")
runApp('app')
source(here(prj_path, "R/import_data.R"))
# --------  Read data ----------
prj_path <- normalizePath("")
# --------  Read data ----------
prj_path <- normalizePath(".")
source(here(prj_path, "R/import_data.R"))
here(prj_path, "R/import_data.R")
source(here(prj_path, "R/import_data.R"))
library(JBrowseR)
library(here)
#| context: setup
library(JBrowseR)
library(here)
dpath <- here("pipeline")
dpath_bac <- here("pipeline/bacannot/output/D45")
if (FALSE) {data_server <- serve_data(dpath_bac)}
assembly <- assembly("http://127.0.0.1:5000/annotation/D45.fna", bgzip = F)
tracks <- tracks(track_feature("http://127.0.0.1:5000/annotation/D45.gff", assembly))
#| panel: sidebar
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
#| panel: fill
plotOutput("distPlot")
JBrowseROutput("browserOutput", height = "400px")
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$browserOutput <- renderJBrowseR(
JBrowseR("View", assembly = assembly, tracks = tracks)
)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
dpath
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
renv::restore()
renv::snapshot()
renv::status()
renv::restore()
renv::snapshot()
renv::install("shinythemes")
renv::install("reactable")
renv::install("pheatmap")
renv::install(c("heatmaply", "gggenomes"))
renv::install(c("heatmaply"))
renv::status()
renv::snapshot()
library(here)
library(tidyverse)
library(data.table)
dpath <- here("../pipeline/canthyd")
dpath <- here("pipeline/canthyd")
fp_isobp <- here("pipeline/canthyd/isophage_bac_all_canthyd.tsv")
library(here)
library(tidyverse)
library(data.table)
dpath <- here("pipeline/canthyd")
fp_isobp <- here("pipeline/canthyd/isophage_bac_all_canthyd.tsv")
fp_isophage <- here("pipeline/canthyd/isophage_and_bac_dramv_canthyd.tsv")
fp_wtp <- here("pipeline/canthyd/isophage_bac_all_wtp.csv")
fp_plassprot <- here("pipeline/canthyd/virome_plassProt_canthyd.tsv")
fp_virbin <- here("pipeline/canthyd/virome_dramv_geneBIN_canthyd.tsv")
fp_virctg <- here("pipeline/canthyd/virome_dramv_geneCTG_canthyd.tsv")
df_isobp <- fread(fp_isobp) %>%
mutate(source = "Isolated bacteria and phages")
df_isophage <- fread(fp_isophage) %>%
mutate(source = "Isolated phages (DRAMv)")
df_wtp <- fread(fp_wtp) %>%
dplyr::select(-V1)
df_plassprot <- fread(fp_plassprot) %>%
mutate(source = "Virome PLASS assembled proteins")
df_virbin <- fread(fp_virbin) %>%
mutate(source = "Virome bins")
df_virctg <- fread(fp_virctg) %>%
mutate(source = "Virome contigs")
df_canthyd <- rbind(df_isobp, df_isophage, df_plassprot, df_virbin, df_virctg)
df_canthyd %>%
dplyr::filter(source != "Isolated bacteria and phages") %>%
dplyr::filter(bitscore >=20) %>%
ggplot(aes(x=bitscore, fill=source)) +
# geom_histogram(aes(y=..density..), binwidth = 5) +
geom_histogram(binwidth = 5) +
# geom_density(aes(fill=source), alpha=0.2) +
geom_vline(aes(xintercept=50), color="blue", linetype="dashed") +
facet_grid(. ~ source)
hist(df_virome$bitscore)
df_virome %>%
dplyr::filter(bitscore>=30)
shiny::runApp()
renv::restore()
renv::status()
renv::snapshot()
